library ieee;
use ieee.std_logic_1164.all;

library lpm;
use lpm.lpm_components.all;

library altera;
use altera.maxplus2.all;


entity teclado is 
port	(	borrar, reloj: in std_logic;
			columna : in std_logic_vector(3 downto 0);
			filas : out std_logic_vector(3 downto 0);
			valido : out std_logic;
			s0,s1,s2,s3,s4,s5,s6: out std_logic)
			;
end teclado;

architecture maxpld of teclado is
type state_type is (e0,e1,e2,e3);
signal estado : state_type;
signal detener : std_logic;
signal cont10k : std_logic;
signal codigo : std_logic_vector (3 downto 0);
signal rebote : std_logic_vector (6 downto 0);
signal conv : std_logic_vector(3 downto 0);
signal codigo_columna : std_logic_vector (1 downto 0);
signal codigo_fila : std_logic_vector (1 downto 0);

begin

--bajar la frecuencia a 10KHz
	process(reloj,borrar)
	variable cont_interno : integer range 0 to 5001;
	begin
	if borrar = '0' then
		cont_interno := 0;
		cont10k <= '0';
	elsif (reloj'event and reloj='1') then
		cont_interno := cont_interno+1;
		if cont_interno = 5000 then
			cont_interno:=0;
			cont10k <= '0';
		elsif (cont_interno<5000 and cont_interno>=2500) then
			cont10k <= '1';
		else
			cont10k <= '0';
		end if;
	end if;
	end process;	
	
-- Asignacion a codigos de filas y columnas

	codigo_columna(0) <= codigo(0);
	codigo_columna(1) <= codigo(1);
	codigo_fila(0) <= codigo(2);
	codigo_fila(1) <= codigo(3);
	
--Transformacion de codigo fila a salida real	
	
	with codigo_fila select
			filas <= "ZZZ1" when "00",
						"ZZ1Z" when "01",
						"Z1ZZ" when "10",
						"1ZZZ" when "11";
		
	
--Componentes de conversores,contadores y 7 segmentos	
	conversor_10khz : lpm_counter
								generic map(LPM_WIDTH => 4, LPM_MODULUS => 16)
								port map(aclr => not(borrar), q=>codigo(3 downto 0), clock => cont10k, cnt_en => detener);
								
	contador_10mseg : lpm_counter
								generic map(LPM_WIDTH => 7, LPM_MODULUS => 101)
								port map(aclr => not(borrar), q=>rebote(6 downto 0), clock => cont10k, cnt_en => not(detener));

	conversor_unidades : a_7447	port map(A => conv(0), B => conv(1), C => conv(2), D => conv(3), LTN => '1', RBIN => '1', BIN =>'1',
														oa => s0, ob=> s1, oc => s2, od => s3, oe => s4, a_of => s5, og => s6);
	
	
--Maquina de estados
	
	process(reloj,borrar)
	begin
		if borrar='0' then
			estado <= e0;
			detener <= '1';
			valido <= '0';
		elsif (reloj'event and reloj='1') then
			case estado is
					when e0 =>
							case codigo_columna is
								 when "00" =>
									 if columna(0) = '0' then
										 detener <= '0';
										 estado <= e1;
									 end if;
								 when "01" =>
									 if columna(1) = '0' then
										 detener <= '0';
										 estado <= e1;										 
									 end if;
								 when "10" =>
								 	 if columna(2) = '0' then
										 detener <= '0';
										 estado <= e1;										 
									 end if;
								 when "11" =>
									 if columna(3) = '0' then
										 detener <= '0';
										 estado <= e1;									 
									 end if;
								 end case;
					when e1 =>
						if (rebote="1100100") then
							if (columna(0)='0' or columna(1)='0' or columna(2)='0' or columna(3)='0') then
								valido<= '1';
								estado <= e2;
							else
								estado <=e3;
							end if;
						end if;
					when e2 =>
							case codigo is
								when "0000" => conv <= "0001";
								when "0001" => conv <= "0010";
								when "0010" => conv <= "0011";
								when "0011" => conv <= "1100";
								when "0100" => conv <= "0100";
								when "0101" => conv <= "0101";
								when "0110" => conv <= "0110";
								when "0111" => conv <= "1101";
								when "1000" => conv <= "0111";
								when "1001" => conv <= "1000";
								when "1010" => conv <= "1001";
								when "1011" => conv <= "1110";
								when "1100" => conv <= "1010";
								when "1101" => conv <= "0000";
								when "1110" => conv <= "1011";
								when "1111" => conv <= "1111";
							end case;
							estado <= e3;
					when e3 =>
						detener <='1';
						valido <='0';
						estado<=e0;
				end case;
			end if;
	end process;
end maxpld;					
